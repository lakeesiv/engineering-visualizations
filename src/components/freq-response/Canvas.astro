---
---

<div
  class="flex-row mb-4 w-full place-content-evenly hidden"
  id="nyquistVisual"
>
  <div class="flex flex-col space-y-2 px-4 pb-4 m-8 bg-b-800 rounded-xl">
    <canvas id="unitCircle" width="400" height="400"></canvas>
    <p class="p-4 max-w-sm self-center">
      Drag the slider on the unit circle to change the input frequency.
      Alternatively, use the sweep button to sweep the frequency from \(-\pi \)
      to \(\pi \)
    </p>
    <button
      class="bg-black border-2 border-gray-800 rounded-md w-28 p-2 self-center hover:bg-b-900 transition-colors"
      id="sweep">Sweep</button
    >
  </div>
  <div
    class="m-8 p-4 bg-black rounded-lg border-2 border-gray-800 border-opacity-60"
  >
    <div id="nyquist" class="w-full h-full"></div>
  </div>
</div>

<div class="flex flex-row w-full place-content-evenly">
  <div
    class="w-[38rem] p-2 bg-black rounded-lg border-2 border-gray-800 border-opacity-60"
  >
    <div id="mag" class="w-full h-full bg-red-500"></div>
  </div>
  <div
    class="w-[38rem] p-2 bg-black rounded-lg border-2 border-gray-800 border-opacity-60"
  >
    <div id="phase" class="w-full h-full bg-red-500"></div>
  </div>
</div>

<!-- <div class="flex flex-row mb-4">
  <div class="flex flex-col space-y-2 pb-4 m-8 bg-b-800/80 rounded-xl">
    <h2 class="p-2 mt-2 font-semibold text-2xl max-w-sm self-center">
      How it works
    </h2>
    <p class="px-6 max-w-sm self-center text-gray-300">
      This is a very simple implementation of using the poles and zeros of a
      transfer function to graphically plot the frequency response of a system.
      It uses the fact that the magnitude is equal to product of the distances
      of all zeros to the slider divided by the product of the distances of all
      poles to the slider. The phase is equal to the sum of the angles of all
      zeros minuts the sum of the angles of all poles.
    </p>
    <hr class="mx-6 text-gray-300 opacity-60 my-2" />
    <h2 class="p-2 mt-2 font-semibold text-2xl max-w-sm self-center">
      Limitations
    </h2>
    <p class="px-6 max-w-sm self-center text-gray-300">
      When there are repeated poles the plotting is not perfect. Additionally if
      the poles are too close to the unit circle then you will get a large
      magnitude response, hence you will need to zoom into the plot to see the
      response. Also I do not really trust the phase response, it seems weird.
      Another limitation is I made this in a few hours so it is not very robust
      / well written / designed.
    </p>
  </div>
  <div class="flex flex-col gap-3 ml-8">
    <div
      class="m-8 p-4 bg-black rounded-lg border-2 border-gray-800 border-opacity-60"
    >
      <div id="mag" class="w-full h-full"></div>
    </div>
    <div
      class="m-8 p-4 bg-black rounded-lg border-2 border-gray-800 border-opacity-60"
    >
      <div id="phase" class="w-full h-full"></div>
    </div>
  </div>
</div> -->

<script>
  const canvas = document.getElementById("unitCircle") as HTMLCanvasElement;
  const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
  const _canvasOffset = canvas.getBoundingClientRect();
  const offsetX = _canvasOffset.left;
  const offsetY = _canvasOffset.top;
  const TwoPI = Math.PI * 2;

  type Coordinate = [number, number];
  type ListOfCoordinates = Coordinate[];
  type Trace = {
    x: number[];
    y: number[];
    mode: "markers" | "lines+markers";
    type: "scattergl" | "scatter";
    text: string[] | number[];
  };
  type ExtendedWindow = Window &
    typeof globalThis & {
      Plotly: any; // cba to add types
    };
  type Data = {
    x: number[];
    y: number[];
    frequency: number[];
    magnitude: number[];
    phase: number[];
  };

  function Plot(
    divId: string,
    data: Partial<Data | Trace>,
    labels: {
      x: string;
      y: string;
      title: string;
    }
  ) {
    const _layout = {
      autosize: true,
      title: labels.title,
      xaxis: {
        title: labels.x,
        color: "#cccccc",
      },
      yaxis: {
        title: labels.y,
        color: "#cccccc",
      },
      font: {
        color: "#cccccc",
        family: "DM Sans, sans-serif",
      },
      margin: { l: 50, r: 50, b: 50, t: 50 },

      plot_bgcolor: "black",
      paper_bgcolor: "black",
    };
    const _window = window as ExtendedWindow;
    _window.Plotly.newPlot(divId, [data], _layout, {
      responsive: true,
      displayLogo: false,
      displayModeBar: false,
      modeBarButtonsToRemove: ["lasso2d"],
    });
  }

  const urlSearchParams = new URLSearchParams(window.location.search);
  const config = JSON.parse(
    Object.fromEntries(urlSearchParams.entries()).config
  );

  if (config.poles.length > 0 || config.zeros.length > 0) {
    const nyquistVisual = document.getElementById(
      "nyquistVisual"
    ) as HTMLDivElement;
    nyquistVisual.style.display = "flex";

    // no poles or zeros
  }

  const complexNumberToCartesian = (complexNumber: [number, number]) => {
    const [mag, phase] = complexNumber;
    const p = (phase * Math.PI) / 180;
    return [mag * Math.cos(p), mag * Math.sin(p)] as Coordinate;
  };

  const mapArrayToCartesian = (array: [number, number][] | []) => {
    if (array.length === 0) {
      return [];
    }
    return array.map(complexNumberToCartesian);
  };

  let poles: ListOfCoordinates = mapArrayToCartesian(config.poles);
  let zeros: ListOfCoordinates = mapArrayToCartesian(config.zeros);

  const magnitudeAndArg = (coord: Coordinate) => {
    const [x, y] = coord;
    const magnitude = Math.sqrt(x * x + y * y);
    const arg = Math.atan2(y, x);
    return [magnitude, arg];
  };

  // find the poles where the magnitude is > 0.8
  let dangerAngles = poles.map((pole) => {
    const [magnitude, arg] = magnitudeAndArg(pole);
    if (magnitude > 0.8) {
      return arg;
    }
  });

  let FrequencyResponseData: Data = {
    x: [],
    y: [],
    frequency: [],
    magnitude: [],
    phase: [],
  };

  const unitCircleCentreX = 200;
  const unitCircleCentreY = 200;
  const unitCircleRadius = 150;
  const unitCircleBorderColor = "gray";
  const knobRadius = 8;
  const knobColor = "pink";

  DrawFrame(unitCircleCentreX, unitCircleCentreY, 0); // just to get started

  function DrawTargets(
    x: number,
    y: number,
    varient: "Pole" | "Zero",
    width = 5,
    lineWidth = 2,
    color = "red"
  ) {
    switch (varient) {
      case "Pole":
        ctx.beginPath();
        ctx.moveTo(x - width, y - width);
        ctx.lineTo(x + width, y + width);
        ctx.moveTo(x + width, y - width);
        ctx.lineTo(x - width, y + width);
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = "lightblue";
        ctx.stroke();
        break;
      case "Zero":
        ctx.beginPath();
        ctx.arc(x, y, width, 0, TwoPI, false);
        ctx.fillStyle = "orange";
        ctx.fill();
        ctx.lineWidth = lineWidth;
        ctx.strokeStyle = "orange";
        ctx.stroke();
        break;
    }
  }

  function DrawFrame(mouseX: number, mouseY: number, angleOverride?: number) {
    angleOverride && console.log("angleOverride", angleOverride);

    let angle =
      angleOverride ||
      Math.atan2(mouseY - unitCircleCentreY, mouseX - unitCircleCentreX);

    let poleCoords: ListOfCoordinates =
      poles.length > 0
        ? poles.map((pole) => {
            const x = pole[0] * unitCircleRadius + unitCircleCentreX;
            const y = -pole[1] * unitCircleRadius + unitCircleCentreY; // cba to figure out why this is negative
            return [x, y];
          })
        : [];

    let zeroCoords: ListOfCoordinates =
      zeros.length > 0
        ? zeros.map((zero) => {
            const x = zero[0] * unitCircleRadius + unitCircleCentreX;
            const y = -zero[1] * unitCircleRadius + unitCircleCentreY;
            return [x, y];
          })
        : [];

    let knobX = unitCircleRadius * Math.cos(angle) + unitCircleCentreX;
    let knobY = unitCircleRadius * Math.sin(angle) + unitCircleCentreY;

    // start drawing
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // draw circle
    ctx.beginPath();
    ctx.arc(
      unitCircleCentreX,
      unitCircleCentreY,
      unitCircleRadius,
      0,
      TwoPI,
      false
    );

    ctx.lineWidth = 2;
    ctx.strokeStyle = unitCircleBorderColor;
    ctx.stroke();

    // draw knob
    ctx.beginPath();
    ctx.arc(knobX, knobY, knobRadius, 0, TwoPI, false);
    ctx.fillStyle = knobColor;
    ctx.fill();
    ctx.lineWidth = 2;
    ctx.strokeStyle = "black";
    ctx.stroke();

    let nyquistMagnitude = 1;
    let nyquistAngle = 0;

    poleCoords.forEach((pole) => {
      DrawTargets(pole[0], pole[1], "Pole");
      // draw a line from the pole to the indicator
      ctx.beginPath();
      ctx.moveTo(pole[0], pole[1]);
      ctx.lineTo(knobX, knobY);
      ctx.lineWidth = 2;
      ctx.strokeStyle = "lightblue";
      ctx.stroke();
      // calculate the length of the line
      const dx = -pole[0] + knobX;
      const dy = pole[1] - knobY;
      const length = Math.sqrt(dx * dx + dy * dy) / unitCircleRadius;
      // calculate the angle between the line and the indicator
      const poleAngle = Math.atan2(dy, dx);

      // draw pole angle arc
      ctx.beginPath();
      ctx.arc(pole[0], pole[1], 20, 0, -poleAngle, poleAngle > 0);
      ctx.moveTo(pole[0], pole[1]);
      ctx.lineTo(pole[0] + 20, pole[1]);
      ctx.stroke();

      ctx.lineWidth = 2;
      ctx.strokeStyle = "lightblue";
      ctx.stroke();

      nyquistAngle -= poleAngle;

      nyquistMagnitude /= length;
    });

    zeroCoords.forEach((zero) => {
      DrawTargets(zero[0], zero[1], "Zero");
      // draw a line from the pole to the indicator
      ctx.beginPath();
      ctx.moveTo(zero[0], zero[1]);
      ctx.lineTo(knobX, knobY);
      ctx.lineWidth = 2;
      ctx.strokeStyle = "orange";
      ctx.stroke();
      // calculate the length of the line
      const dx = -zero[0] + knobX;
      const dy = zero[1] - knobY;
      const length = Math.sqrt(dx * dx + dy * dy) / unitCircleRadius;
      // calculate the angle between the line and the indicator
      const zeroAngle = Math.atan2(dy, dx);

      ctx.beginPath();
      ctx.arc(zero[0], zero[1], 20, 0, -zeroAngle, zeroAngle > 0);
      ctx.moveTo(zero[0], zero[1]);
      ctx.lineTo(zero[0] + 20, zero[1]);
      ctx.stroke();

      nyquistAngle += zeroAngle;

      nyquistMagnitude *= length;
    });

    const nyquistX = nyquistMagnitude * Math.cos(nyquistAngle);
    const nyquistY = nyquistMagnitude * Math.sin(nyquistAngle);
    const nyquistTheta = -angle;

    FrequencyResponseData.x.push(nyquistX);
    FrequencyResponseData.y.push(nyquistY);
    FrequencyResponseData.frequency.push(nyquistTheta);
    FrequencyResponseData.magnitude.push(nyquistMagnitude);
    FrequencyResponseData.phase.push(nyquistAngle * (180 / Math.PI));

    Plot(
      "nyquist",

      {
        x: FrequencyResponseData.x,
        y: FrequencyResponseData.y,
        type: "scatter",
        mode: "markers",
        text: FrequencyResponseData.frequency,
      },
      {
        x: "Real",
        y: "Imaginary",
        title: "Nyquist Plot",
      }
    );

    Plot(
      "mag",
      {
        x: FrequencyResponseData.frequency,
        y: FrequencyResponseData.magnitude,
        type: "scatter",
        mode: "markers",
        text: FrequencyResponseData.frequency,
      },
      {
        x: "Frequency (rad)",
        y: "Magnitude",
        title: "Magnitude Plot",
      }
    );
    Plot(
      "phase",
      {
        x: FrequencyResponseData.frequency,
        y: FrequencyResponseData.phase,
        type: "scatter",
        mode: "markers",
        text: FrequencyResponseData.frequency,
      },
      {
        x: "Frequency (rad)",
        y: "Phase (deg)",
        title: "Phase Plot",
      }
    );
  }

  function handleMouseDown(e: MouseEvent) {
    let MouseX = e.clientX - offsetX;
    let MouseY = e.clientY - offsetY;

    DrawFrame(MouseX, MouseY);
  }

  let down = false;
  canvas.addEventListener("mousedown", (e) => {
    down = true;
  });
  canvas.addEventListener("mousemove", (e) => down && handleMouseDown(e));
  canvas.addEventListener("mouseup", (e) => (down = false));
  // if sweep button is clicked, sweep the knob

  const sweepButton = document.getElementById("sweep") as HTMLButtonElement;
  sweepButton.addEventListener("click", () => {
    let angle = -0.005;

    const interval = setInterval(() => {
      let inDangerZone = false;

      if (dangerAngles) {
        let delta = 10000;
        dangerAngles.forEach((a) => {
          if (a !== undefined) {
            let correctedAngle = angle;
            if (Math.abs(angle) > Math.PI) {
              correctedAngle = angle - Math.sign(angle) * 2 * Math.PI;
            }

            delta = Math.min(
              delta,
              Math.abs(Math.abs(correctedAngle) - Math.abs(a))
            );
          }
        });

        if (delta < 0.25) {
          inDangerZone = true;
        }
      }

      const increment = inDangerZone ? 0.005 : 0.05;
      let a = angle;

      if (Math.abs(angle) > Math.PI) {
        a = a - Math.sign(angle) * 2 * Math.PI;
      }
      angle -= increment;
      console.log(angle);
      DrawFrame(0, 0, a);

      if (Math.abs(angle) > TwoPI) {
        clearInterval(interval);
      }
    }, 0.0001);
  });
</script>
